# Detailed Design

[TOC]

------

## Process Flow Design

### Metadata Layer Construct

<img src="Detailed Design.assets/MetadataLayerConstruct.png" alt="MetadataLayerConstruct" style="zoom: 40%;" />

### Ontology Reasoning

<img src="Detailed Design.assets/OntologyReasoning.png" alt="OntologyReasoning" style="zoom:50%;" />

### Rule Reasoning

<img src="Detailed Design.assets/RuleReasoning.png" alt="RuleReasoning" style="zoom:50%;" />

### Query

<img src="Detailed Design.assets/Query.png" alt="Query" style="zoom:50%;" />

### Event

<img src="Detailed Design.assets/Event.png" alt="Event" style="zoom:50%;" />

------

## Algorithm Design

### Metadata Layer Construct

#### Build Reason

- RDF has limited expressiveness: it lacks abstraction
- extended map implied information (knowledge reasoning)

#### Three Layer Architecture

1. **Data Layer**

   - The construction of RDF triples does not involve abstractions

     ```ttl
     @prefix owl:             <http://www.w3.org/2002/07/owl#> .
     @prefix rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
     @prefix rdfs:            <http://www.w3.org/2000/01/rdf-schema#> .
     
     @prefix :                <http://localhost/KGns/> .
     @prefix rel:             <http://localhost/KGns/relationship/> .
     @prefix namespace_rel:   <http://namespace/10.60.38.181/> .
     @prefix pods_rel:        <http://pods/10.60.38.181/> .
     @prefix containers_rel:  <http://containers/10.60.38.181/> .
     @prefix services_rel:    <http://services/10.60.38.181/> .
     @prefix servers_rel:     <http://servers/10.60.38.181/> .
     @prefix environment_rel: <http://environment/10.60.38.181/> .
     
     @prefix namespace:       <http://localhost/KGns/Namespace/> .
     @prefix pods:            <http://localhost/KGns/Pod/> .
     @prefix containers:      <http://localhost/KGns/Container/> .
     @prefix services:        <http://localhost/KGns/Service/> .
     @prefix environment:     <http://localhost/KGns/Environment/> .
     
     ## objects
     
     <http://services/10.60.38.181/sock-shop/session-db>
         rdf:type :Service .
     
     <http://containers/10.60.38.181/sock-shop/carts-db/Network_Input_Packets>
         rdf:type :Container .
     
     <http://services/10.60.38.181/sock-shop/front-end-external/success_rate>
         rdf:type :Service .
     
     <http://containers/10.60.38.181/sock-shop/user/MEM_Usage>
         rdf:type :Container .
     
     <http://services/10.60.38.181/sock-shop/carts-db>
         rdf:type :Service .
     ```

2. **Model Layer**

   - Basic class and object concepts (RDFS)

   - Build basic classes, and relatively simple relationships

   - **Main class in Lab Knowledge Graph**

     - purely physical: server environment
     - purely logical level: namspace service
     - based on physical + logical level: pod container

     ```ttl
     ## Class
     :Namespace rdf:type owl:Class .
     :Pod rdf:type owl:Class .
     :Container rdf:type owl:Class .
     :Service rdf:type owl:Class .
     :Server rdf:type owl:Class .
     :Environment rdf:type owl:Class .
     
     
     ## ObjectProperty
     # s: Namespace
     namespace_rel:supervises
         rdf:type    owl:ObjectProperty ;
         rdfs:domain :Namespace ;
         rdfs:range  :Namespace .
     
     
     # s: Pod
     pods_rel:contains
         rdf:type    owl:ObjectProperty ;
         rdfs:domain :Pod ;
         rdfs:range  :Container .
     
     pods_rel:deployed_in
         rdf:type    owl:ObjectProperty ;
         rdfs:domain :Pod ;
         rdfs:range  :Server .
     
     pods_rel:provides
         rdf:type    owl:ObjectProperty ;
         rdfs:domain :Pod ;
         rdfs:range  :Service .
     
     
     # s: Container
     containers_rel:cc_profile
         rdf:type    owl:ObjectProperty ;	# profile for Container-Container
         rdfs:domain :Container ;
         rdfs:range  :Container .
     
     
     # s: Service
     services_rel:ss_profile
         rdf:type    owl:ObjectProperty ;	# profile for Service-Service
         rdfs:domain :Service ;
         rdfs:range  :Service .
     
     # s: Server
     servers_rel:manage
         rdf:type    owl:ObjectProperty ;
         rdfs:domain :Server ; 		# masterServer
         rdfs:range  :Server .
     
     # s: Environment
     environment_rel:has
         rdf:type    owl:ObjectProperty ;
         rdfs:domain :Environment ;
         rdfs:range  :Server .
     ```

3. **Logic Layer**

   - Complex logic involved (owl)

   - Build object properties and data properties

     ```ttl
     @prefix namespace:       <http://localhost/KGns/Namespace/> .
     @prefix pods:            <http://localhost/KGns/Pod/> .
     @prefix containers:      <http://localhost/KGns/Container/> .
     @prefix services:        <http://localhost/KGns/Service/> .
     @prefix environment:     <http://localhost/KGns/Environment/> .
     
     ## Class
     :Namespace rdf:type owl:Class .
     :Pod rdf:type owl:Class .
     :Container rdf:type owl:Class .
     :Service rdf:type owl:Class .
     :Server rdf:type owl:Class .
     :Environment rdf:type owl:Class .
     
     ## ObjectProperty
     # s: Pod
     pods_rel:contains
         rdf:type    owl:ObjectProperty ;
         rdfs:domain :Pod ;
         rdfs:range  :Container .
     
     pods_rel:deployed_in
         rdf:type    owl:ObjectProperty ;
         rdfs:domain :Pod ;
         rdfs:range  :Server .
     
     pods_rel:provides
         rdf:type    owl:ObjectProperty ;
         rdfs:domain :Pod ;
         rdfs:range  :Service .
     
     ## objects
     <http://services/10.60.38.181/sock-shop/session-db>
         rdf:type :Service .
     
     <http://containers/10.60.38.181/sock-shop/carts-db/Network_Input_Packets>
         rdf:type :Container .
     
     <http://services/10.60.38.181/sock-shop/front-end-external/success_rate>
         rdf:type :Service .
     
     
     ## relation
     <http://pods/10.60.38.181/sock-shop/shipping-65769d99d7-lmpg7>
         <http://pods/10.60.38.181/contains>    <http://containers/10.60.38.181/sock-shop/shipping> ;
         <http://pods/10.60.38.181/deployed_in> <http://server/10.60.38.181/192.168.199.34> ;
         <http://pods/10.60.38.181/provides>    <http://services/10.60.38.181/sock-shop/shipping> .
     
     <http://pods/10.60.38.181/sock-shop/catalogue-b8587c9c5-wfvkt>
         <http://pods/10.60.38.181/contains>    <http://containers/10.60.38.181/sock-shop/catalogue> ;
         <http://pods/10.60.38.181/deployed_in> <http://server/10.60.38.181/192.168.199.34> ;
         <http://pods/10.60.38.181/provides>    <http://services/10.60.38.181/sock-shop/catalogue> .
     ```

#### Key Steps

1. Read data from lab dataset.
2. Distinguish between entities.
   - operation and maintenance entities: entityType
   - state information corresponding to these operation and maintenance entities: StatusInformation
3. Set the corresponding map for each entity and relationship.
4. Refactor prefix.
5. Refactor class.
6. Refactor property.
7. Refactor relation.
8. Refactor event.



### Mechian Learning Reasoning Based on TransE

<img src="Detailed Design.assets/Train Time - Loss figure.png" alt="Train Time - Loss figure" style="zoom:50%;" />



- backgroud (surveys or proto-algorithm introduction)
- algorithm framework (flowchart of pseudocde)
- dataset
- dimensions & weight
- key steps

------

## Class Design

![Class Diagram](Detailed Design.assets/Class Diagram.png)


